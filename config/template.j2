/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_RSI_Params_{{ Timeframe }} : RSIParams {
  Indi_RSI_Params_{{ Timeframe }}() : RSIParams(indi_rsi_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ RSI_Indi_RSI_Applied_Price | default(0) }};
    period = {{ RSI_Indi_RSI_Period | default(0) }};
    shift = {{ RSI_Indi_RSI_Shift | default(0) }};
  }
} indi_rsi_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_RSI_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_RSI_Params_{{ Timeframe }}() : StgParams(stg_rsi_defaults) {
    lot_size = {{ RSI_LotSize | default(0) }};
    signal_open_method = {{ RSI_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ RSI_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ RSI_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ RSI_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ RSI_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ RSI_SignalCloseLevel | default(0) }};
    price_stop_method = {{ RSI_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ RSI_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ RSI_TickFilterMethod  | default(1) }};
    max_spread = {{ RSI_MaxSpread | default(0) }};
  }
} stg_rsi_{{ Timeframe | lower }};
